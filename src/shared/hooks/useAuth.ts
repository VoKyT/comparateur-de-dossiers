/**
 * @fileoverview Hook React pour gestion de l'authentification Google
 * @description Hook personnalis√© g√©rant l'√©tat d'authentification selon architecture CLAUDE.md
 * @dependencies googleAuthService - Service d'authentification Google
 * @state user - Utilisateur connect√©, isLoading - √âtat de chargement, error - Erreur auth
 * @methods signIn - Connexion, signOut - D√©connexion, clearError - Effacer erreur
 * @events √âcoute automatiquement les √©v√©nements d'auth du service
 * @usage const { user, signIn, signOut, isLoading, error } = useAuth();
 */

import { useState, useEffect, useCallback } from 'react';
import { googleAuthService, GoogleUser } from '@/shared/services/googleAuthService';

export interface AuthState {
  user: GoogleUser | null;
  isLoading: boolean;
  error: string | null;
  isSignedIn: boolean;
}

export interface AuthActions {
  signIn: () => Promise<void>;
  signOut: () => Promise<void>;
  clearError: () => void;
  refreshUser: () => void;
}

export type UseAuthReturn = AuthState & AuthActions;

/**
 * Hook personnalis√© pour l'authentification Google
 * 
 * Fonctionnalit√©s :
 * - Gestion de l'√©tat utilisateur connect√©/d√©connect√©
 * - M√©thodes de connexion/d√©connexion async
 * - Gestion des erreurs d'authentification
 * - √âtats de chargement pendant les op√©rations
 * - √âcoute automatique des √©v√©nements d'auth
 * - Persistance automatique de l'√©tat
 */
export function useAuth(): UseAuthReturn {
  const [user, setUser] = useState<GoogleUser | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // √âtat d√©riv√© pour la connexion
  const isSignedIn = user !== null;

  /**
   * Initialise l'√©tat utilisateur au montage du hook
   */
  useEffect(() => {
    console.log('üîê [USE_AUTH] Initialisation du hook d\'authentification');
    
    // R√©cup√©rer l'utilisateur actuel depuis le service
    const currentUser = googleAuthService.getCurrentUser();
    if (currentUser) {
      setUser(currentUser);
      console.log('‚úÖ [USE_AUTH] Utilisateur existant r√©cup√©r√©:', currentUser.name);
    }
  }, []);

  /**
   * √âcoute les √©v√©nements d'authentification du service
   */
  useEffect(() => {
    const handleSignIn = (event: CustomEvent) => {
      const { user } = event.detail;
      console.log('üîê [USE_AUTH] √âv√©nement connexion re√ßu:', user.name);
      setUser(user);
      setError(null);
      setIsLoading(false);
    };

    const handleSignOut = () => {
      console.log('üîì [USE_AUTH] √âv√©nement d√©connexion re√ßu');
      setUser(null);
      setError(null);
      setIsLoading(false);
    };

    // Ajouter les listeners d'√©v√©nements
    window.addEventListener('google-auth-signin', handleSignIn as EventListener);
    window.addEventListener('google-auth-signout', handleSignOut as EventListener);

    // Cleanup au d√©montage
    return () => {
      window.removeEventListener('google-auth-signin', handleSignIn as EventListener);
      window.removeEventListener('google-auth-signout', handleSignOut as EventListener);
    };
  }, []);

  /**
   * Connexion Google avec gestion d'erreurs
   */
  const signIn = useCallback(async (): Promise<void> => {
    if (isLoading) {
      console.log('‚ö†Ô∏è [USE_AUTH] Connexion d√©j√† en cours, ignor√©e');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
      console.log('üîê [USE_AUTH] D√©but processus connexion Google');
      
      const authenticatedUser = await googleAuthService.signIn();
      console.log('‚úÖ [USE_AUTH] Connexion r√©ussie via service:', authenticatedUser.name);
      
      // L'√©tat sera mis √† jour via l'√©v√©nement du service
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erreur de connexion inconnue';
      console.error('‚ùå [USE_AUTH] Erreur connexion:', errorMessage);
      
      setError(errorMessage);
      setIsLoading(false);
      
      // Messages d'erreur utilisateur plus clairs
      if (errorMessage.includes('Popup')) {
        setError('Veuillez autoriser les popups pour vous connecter avec Google');
      } else if (errorMessage.includes('cancelled') || errorMessage.includes('annul√©e')) {
        setError('Connexion annul√©e');
      } else if (errorMessage.includes('Timeout')) {
        setError('D√©lai de connexion d√©pass√©. Veuillez r√©essayer.');
      } else {
        setError('Erreur lors de la connexion Google. Veuillez r√©essayer.');
      }
    }
  }, [isLoading]);

  /**
   * D√©connexion Google avec gestion d'erreurs
   */
  const signOut = useCallback(async (): Promise<void> => {
    if (isLoading) {
      console.log('‚ö†Ô∏è [USE_AUTH] D√©connexion d√©j√† en cours, ignor√©e');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
      console.log('üîì [USE_AUTH] D√©but processus d√©connexion');
      
      await googleAuthService.signOut();
      console.log('‚úÖ [USE_AUTH] D√©connexion r√©ussie via service');
      
      // L'√©tat sera mis √† jour via l'√©v√©nement du service
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erreur de d√©connexion inconnue';
      console.error('‚ùå [USE_AUTH] Erreur d√©connexion:', errorMessage);
      
      setError('Erreur lors de la d√©connexion. Veuillez r√©essayer.');
      setIsLoading(false);
    }
  }, [isLoading]);

  /**
   * Efface l'erreur actuelle
   */
  const clearError = useCallback((): void => {
    setError(null);
    console.log('üßπ [USE_AUTH] Erreur effac√©e');
  }, []);

  /**
   * Actualise l'utilisateur depuis le service
   */
  const refreshUser = useCallback((): void => {
    const currentUser = googleAuthService.getCurrentUser();
    setUser(currentUser);
    console.log('üîÑ [USE_AUTH] Utilisateur actualis√©:', currentUser?.name || 'aucun');
  }, []);

  // Log des changements d'√©tat en d√©veloppement
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üìä [USE_AUTH] √âtat mis √† jour:', {
        isSignedIn,
        userName: user?.name || 'non connect√©',
        isLoading,
        hasError: !!error
      });
    }
  }, [user, isLoading, error, isSignedIn]);

  return {
    // √âtat
    user,
    isLoading,
    error,
    isSignedIn,
    
    // Actions
    signIn,
    signOut,
    clearError,
    refreshUser
  };
}