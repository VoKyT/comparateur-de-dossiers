/**
 * @fileoverview Script preload pour la communication s√©curis√©e entre processus
 * @description Expose une API s√©curis√©e au renderer process via contextBridge
 * @author Comparateur de dossiers
 * @created 2025-08-19
 * @lastModified 2025-08-19
 * @dependencies electron (contextBridge, ipcRenderer)
 * @exports window.electronAPI (API s√©curis√©e pour le renderer)
 * @imports electron
 * @usage Charg√© automatiquement par Electron dans le renderer process
 * @related src/electron/main/main.js, src/electron/renderer/index.html
 * @notes Utilise contextBridge pour une isolation s√©curis√©e du contexte
 */

const { contextBridge, ipcRenderer } = require('electron');

/**
 * API expos√©e au renderer process de mani√®re s√©curis√©e
 * Utilise contextBridge pour √©viter l'exposition directe de Node.js
 */
contextBridge.exposeInMainWorld('electronAPI', {
  
  // Informations syst√®me et application
  versions: {
    /**
     * R√©cup√®re les versions des composants
     * @returns {Object} Versions de Node.js, Chromium, Electron
     */
    getVersions: () => process.versions,
    
    /**
     * R√©cup√®re le nom de la plateforme
     * @returns {string} Nom de la plateforme (win32, darwin, linux)
     */
    getPlatform: () => process.platform,
    
    /**
     * R√©cup√®re l'architecture du syst√®me
     * @returns {string} Architecture (x64, arm64, etc.)
     */
    getArch: () => process.arch
  },

  // Gestion des fichiers et dossiers (pr√™t pour l'impl√©mentation future)
  fileSystem: {
    /**
     * S√©lectionner un dossier (placeholder pour future impl√©mentation)
     * @returns {Promise<string|null>} Chemin du dossier s√©lectionn√© ou null
     */
    selectFolder: async () => {
      // TODO: Impl√©menter avec dialog.showOpenDialog
      return await ipcRenderer.invoke('dialog:select-folder');
    },

    /**
     * Lire le contenu d'un dossier (placeholder)
     * @param {string} folderPath - Chemin du dossier √† lire
     * @returns {Promise<Array>} Liste des fichiers et dossiers
     */
    readFolder: async (folderPath) => {
      // TODO: Impl√©menter la lecture de dossier
      return await ipcRenderer.invoke('fs:read-folder', folderPath);
    },

    /**
     * Comparer deux dossiers (placeholder)
     * @param {string} folder1 - Chemin du premier dossier
     * @param {string} folder2 - Chemin du deuxi√®me dossier
     * @returns {Promise<Object>} R√©sultat de la comparaison
     */
    compareFolders: async (folder1, folder2) => {
      // TODO: Impl√©menter la comparaison
      return await ipcRenderer.invoke('fs:compare-folders', folder1, folder2);
    }
  },

  // Communication avec le processus principal
  app: {
    /**
     * Quitter l'application
     * @returns {void}
     */
    quit: () => {
      ipcRenderer.send('app:quit');
    },

    /**
     * Minimiser la fen√™tre
     * @returns {void}
     */
    minimize: () => {
      ipcRenderer.send('window:minimize');
    },

    /**
     * Maximiser/restaurer la fen√™tre
     * @returns {void}
     */
    toggleMaximize: () => {
      ipcRenderer.send('window:toggle-maximize');
    },

    /**
     * Fermer la fen√™tre
     * @returns {void}
     */
    close: () => {
      ipcRenderer.send('window:close');
    }
  },

  // Syst√®me de notifications (pour les futures fonctionnalit√©s)
  notifications: {
    /**
     * Afficher une notification syst√®me
     * @param {string} title - Titre de la notification
     * @param {string} body - Corps de la notification
     * @returns {void}
     */
    show: (title, body) => {
      ipcRenderer.send('notification:show', { title, body });
    }
  },

  // Gestion des th√®mes et pr√©f√©rences
  preferences: {
    /**
     * Obtenir le th√®me actuel du syst√®me
     * @returns {Promise<string>} 'light' ou 'dark'
     */
    getTheme: async () => {
      return await ipcRenderer.invoke('preferences:get-theme');
    },

    /**
     * √âcouter les changements de th√®me
     * @param {Function} callback - Fonction appel√©e lors du changement
     * @returns {Function} Fonction de d√©sabonnement
     */
    onThemeChanged: (callback) => {
      const handler = (event, theme) => callback(theme);
      ipcRenderer.on('preferences:theme-changed', handler);
      
      // Retourner une fonction de cleanup
      return () => {
        ipcRenderer.removeListener('preferences:theme-changed', handler);
      };
    }
  },

  // Utilitaires de d√©veloppement
  development: {
    /**
     * Ouvrir les DevTools
     * @returns {void}
     */
    openDevTools: () => {
      ipcRenderer.send('dev:open-devtools');
    },

    /**
     * Actualiser la fen√™tre
     * @returns {void}
     */
    reload: () => {
      ipcRenderer.send('dev:reload');
    },

    /**
     * Basculer en mode plein √©cran
     * @returns {void}
     */
    toggleFullscreen: () => {
      ipcRenderer.send('window:toggle-fullscreen');
    }
  }
});

/**
 * Gestion des erreurs du preload script
 */
process.on('uncaughtException', (error) => {
  console.error('Erreur non g√©r√©e dans le preload script:', error);
});

/**
 * Log de d√©marrage du preload
 */
console.log('üîß Preload script charg√© - API Electron expos√©e de mani√®re s√©curis√©e');

/**
 * V√©rification de la s√©curit√© : s'assurer que Node.js n'est pas accessible dans le renderer
 */
if (typeof window !== 'undefined') {
  // Bloquer l'acc√®s direct √† des APIs dangereuses
  delete window.require;
  delete window.exports;
  delete window.module;
}
